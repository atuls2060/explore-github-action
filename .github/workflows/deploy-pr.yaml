name: Deploy Pull Request

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: number
      branch_name:
        description: 'Source Branch Name'
        required: true
        type: string
      pr_state:
        description: 'Pull Request State (e.g., open, closed)'
        required: true
        type: string

jobs:
  deploy-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up environment name
        id: env
        run: echo "env_name=sp-${{ inputs.pr_number }}" >> $GITHUB_ENV

      - name: Create Environment
        id: create-env
        if: ${{ inputs.pr_state == 'opened' }}
        run: echo "creating environment ${{ inputs.pr_state }}"

      - name: Deploy to Environment
        run: |
          echo "Deploying to environment: ${{ inputs.pr_state }} ${{ env.env_name }}.atulsingh.dev"

  create-comment:
    runs-on: ubuntu-latest
    needs: deploy-pr

    steps:
      - name: Fetch the list of changed files in the PR
        id: pr_files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }}
            });
            
            // Check if files are found and process the first file
            if (files.length === 0) {
              console.log("No files changed in the PR.");
              return;
            }

            // Take the first modified file (You can modify the logic if you want to select different files)
            const firstFile = files[0].filename;

            // Remove the extension and replace '.' with '/'
            const modifiedFile = firstFile.replace(/\.(.*)$/, '').replace(/\./g, '/');

            console.log(`Modified file: ${firstFile}`);
            console.log(`Modified file path: ${modifiedFile}`);

            return modifiedFile;
      
      - name: Create comment with the modified file path
        uses: actions/github-script@v7
        with:
          script: |
            const modifiedFile = "${{ steps.pr_files.outputs.result }}";
            
            if (!modifiedFile) {
              console.log("No modified file to comment on.");
              return;
            }

            // Create the comment with the modified file link
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `The testing environment is live! You can [view it here](https://${{ env.env_name }}.example22.com/${modifiedFile}).`
            });
